
-----------to find user location-----------

<!-- <!DOCTYPE html>
<html>
<head>
  <title>Get User Location</title>
</head>
<body>
  <p>Click the button to get your location:</p>
  <button onclick="getUserLocation()">Get Location</button>

  <p>Your current address is: <span id="address"></span></p>

 <script>
    const getUserLocation = () => {
        const status = document.getElementById("address");

        const success = (position) => {
            console.log(position)
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
           
            const geoApiUrl = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`;

            fetch(geoApiUrl)
            .then(res => {
                if (!res.ok) {
                    throw new Error('Network response was not ok');
                }
                return res.json();
            })
            .then(data => {
                console.log(data);
                status.textContent = data.city + ', ' + data.countryName;
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                status.textContent = 'Unable to retrieve location';
            });
        }

        const error = () => {
            status.textContent = 'Unable to retrieve location';
        }

        navigator.geolocation.getCurrentPosition(success, error);
    }
    
 </script>

</body>
</html> -->


<!DOCTYPE html>
<html>
<head>
  <title>Get User Location</title>
</head>
<body>
  <p>Click the button to get your location:</p>
  <button onclick="getUserLocation()">Get Location</button>

  <p>Your current address is: <span id="address"></span></p>

 <script>
    const getUserLocation = () => {
        const status = document.getElementById("address");

        const success = (position) => {
            console.log(position);
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
           
            const geoApiUrl = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`;

            fetch(geoApiUrl)
            .then(res => {
                if (!res.ok) {
                    throw new Error('Network response was not ok');
                }
                return res.json();
            })
            .then(data => {
                console.log(data);
                let address = '';

                if (data.city) {
                    address += data.city + ', ';
                }
                if (data.locality) {
                    address += data.locality + ', ';
                }
                if (data.principalSubdivision) {
                    address += data.principalSubdivision + ', ';
                }
                if (data.countryName) {
                    address += data.countryName;
                }

                status.textContent = address || 'Location not found';
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                status.textContent = 'Unable to retrieve location';
            });
        }

        const error = () => {
            status.textContent = 'Unable to retrieve location';
        }

        navigator.geolocation.getCurrentPosition(success, error);
    }
 </script>

</body>
</html>

----------------------------------------------------------side bar---------------------------------------------------

*{
    text-decoration: none;
    margin: 0;
 }

.admin_page{
    display: flex;
    min-height: 100vh;
}
.side_bar{
    background-color: #000;
    width: 210px;
  box-shadow: -2px 0px 12px 0px #000;
   }
   .logo{
     margin: 25px;
   }
   .logo img{
     max-width: 20%;
     float: left;
     padding-top: 15px;
     padding-right: 5px;
    
  }
   .logo h1{
     padding-top: 20px;
     font-size: 1.1rem;
     color: #fff;
  }
  
  
   .side_bar .sidebar-list{
      position: absolute;
      top: 200px;
   }
   .side_bar .sidebar-list .list-item{
      display: block;
     cursor: pointer;
      padding: 15px;
      padding-left: 30px;
      margin-left: -40px;
      margin-right: -170px;
      font-size: large;
      text-decoration: none;
      
   }
   .side_bar .sidebar-list .list-item :hover{
     color: #7407FE;
     font-size: 1.2rem;

   }
   .side_bar .sidebar-list .list-item a{
      color: #fff;
   }
  
   .side_bar .sidebar-list .list-item.active{
    color: #7407FE;  
    box-shadow: -5px 3px 5px 0px rgba(116, 7, 254, 0.45), -4px -1px 4px 0px #7407FE;
   }
   .side_bar .sidebar-list button{
      position: absolute;
      top: 430px;
      border-radius: 30px;
      border: 2px #7407FE solid;
      padding: 10px;
      width: 100px;
      margin-left: -30px;
      background-color: #000;
      cursor: pointer;
      color: #fff;
   }

   -------------------------java-------------------------------------------------------------------------------------------------------------
      Scanner scan = new Scanner(System.in);
        int a = scan.nextInt();



 =======================dashboard==============================================
 .dashboard{
  width: 100%;
  display: flex;
  align-items: flex-start;
  justify-content: space-evenly;
  padding: 30px;

}
.dashboard .user-login{
   width: 400px;
   height: 200px;
   border-radius: 30px;
   padding: 15px;
   background-color: #bea1f5a7;
   color: white;
   box-shadow: 0px 5px 12px 0px #0000002d;
   border:1px #7407FE solid;
}
.dashboard .user-login .header{
   display: flex;
   align-items: center;
   justify-content: space-around;
}
.dashboard .user-login .header span {
  color: green;
}
.dashboard .user-login .header p {
   color: green;
   margin-left:40px;
   font-size: 20px;
   font-weight: 500;
}       

---------------------------------------------------------python-------------------------------------------------------------------------
import textwrap

def wrap(string, max_width):
    wrapper= textwrap.TextWrapper(width=max_width)
    word_list = wrapper.wrap(text = string)
    for element in word_list:
      while not element ==" " :  
        print(element)


if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)